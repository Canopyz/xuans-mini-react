(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@xuans-mini-react/react')) :
  typeof define === 'function' && define.amd ? define(['@xuans-mini-react/react'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global["@xuans-mini-react/react-dom"] = factory(global.React));
})(this, (function (React) { 'use strict';

  function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n.default = e;
    return Object.freeze(n);
  }

  var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

  const FunctionComponent = 0;
  // HostRoot is the root of a host tree. Could be nested inside another node.
  const HostRoot = 3;
  // A host component (eg a DOM element)
  const HostComponent = 5;
  const HostText = 6;

  const NoFlags = 0;
  const Placement = 1;
  const Update = 1 << 1;
  const ChildDeleted = 1 << 2;
  const MutationMask = Placement | Update | ChildDeleted;

  class FiberNode {
      type;
      tag;
      pendingProps;
      key;
      stateNode;
      ref;
      return;
      sibling;
      child;
      index;
      memoizedProps;
      memoizedState;
      alternate;
      flags;
      subtreeFlags;
      updateQueue;
      constructor(tag, pendingProps, key) {
          // tag is the type of the fiber node
          this.tag = tag;
          this.key = key;
          // stateNode is the instance of the component
          this.stateNode = null;
          // type is the function component or host component
          this.type = null;
          // these form a tree structure
          // return is the pointer to the parent node
          this.return = null;
          this.sibling = null;
          this.child = null;
          this.index = 0;
          this.ref = null;
          // work unit
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          // alternate points to another fiber node
          this.alternate = null;
          // side effect flags
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
      }
  }
  class FiberRootNode {
      container;
      current;
      finishedWork;
      constructor(container, hostRootFiber) {
          this.container = container;
          this.current = hostRootFiber;
          hostRootFiber.stateNode = this;
          this.finishedWork = null;
      }
  }
  function createWorkInProgress(current, pendingProps) {
      let workInProgress = current.alternate;
      if (workInProgress === null) {
          workInProgress = new FiberNode(current.tag, pendingProps, current.key);
          workInProgress.stateNode = current.stateNode;
          workInProgress.alternate = current;
          current.alternate = workInProgress;
      }
      else {
          workInProgress.pendingProps = pendingProps;
          workInProgress.flags = NoFlags;
          workInProgress.subtreeFlags = NoFlags;
      }
      workInProgress.type = current.type;
      workInProgress.updateQueue = current.updateQueue;
      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      return workInProgress;
  }
  function createFiberFromElement(element) {
      const { type, key, props } = element;
      let fiberTag = FunctionComponent;
      if (typeof type === 'string') {
          fiberTag = HostComponent;
      }
      else if (typeof type !== 'function') {
          {
              console.warn('Unknown fiber tag', type);
          }
      }
      const fiber = new FiberNode(fiberTag, props, key);
      fiber.type = type;
      return fiber;
  }

  const createUpdate = (action) => {
      return {
          action,
      };
  };
  const createUpdateQueue = () => {
      return {
          shared: {
              pending: null,
          },
          dispatch: null,
      };
  };
  const enqueueUpdate = (updateQueue, update) => {
      updateQueue.shared.pending = update;
  };
  const processUpdateQueue = (baseState, pendingUpdate) => {
      const result = {
          memoizedState: baseState,
      };
      if (pendingUpdate !== null) {
          const action = pendingUpdate.action;
          // Using typeof here will cause an error
          if (action instanceof Function) {
              result.memoizedState = action(result.memoizedState);
          }
          else {
              result.memoizedState = action;
          }
      }
      return result;
  };

  const supportSymbol = typeof Symbol === 'function' && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for('react.element')
      : 0xeac7;

  function ChildReconciler(shouldTrackSideEffects) {
      function reconcileSingleElement(returnFiber, currentFiber, element) {
          console.log(currentFiber);
          const fiber = createFiberFromElement(element);
          fiber.return = returnFiber;
          return fiber;
      }
      function reconcileSingleTextNode(returnFiber, currentFiber, content) {
          console.log(currentFiber);
          const fiber = new FiberNode(HostText, { content }, null);
          fiber.return = returnFiber;
          return fiber;
      }
      function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags = newFiber.flags | Placement;
          }
          return newFiber;
      }
      return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
          if (typeof newChild === 'object' && newChild !== null) {
              switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                      return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
                  default:
                      {
                          console.warn('Unknown child type', newChild);
                      }
                      break;
              }
          }
          // TODO: multiple children
          // HostText
          if (typeof newChild === 'string' || typeof newChild === 'number') {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
          }
          {
              console.warn('Unknown child type', newChild);
          }
          return null;
      };
  }
  const reconcileChildFibers = ChildReconciler(true);
  const mountChildFibers = ChildReconciler(false);

  const internals = React__namespace.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  let currentlyRenderingFiber = null;
  let workInProgressHook = null;
  const { currentDispatcher } = internals;
  function renderWithHooks(wip) {
      currentlyRenderingFiber = wip;
      wip.memoizedState = null;
      const current = wip.alternate;
      if (current !== null) {
          currentDispatcher.current = null;
      }
      else {
          currentDispatcher.current = HooksDispatcherOnMount;
      }
      const Component = wip.type;
      const props = wip.pendingProps;
      const children = Component(props);
      currentlyRenderingFiber = null;
      return children;
  }
  const HooksDispatcherOnMount = {
      useState: mountState,
  };
  function mountState(initialState) {
      const hook = mountWorkInProgressHook();
      if (initialState instanceof Function) {
          hook.memoizedState = initialState();
      }
      else {
          hook.memoizedState = initialState;
      }
      const queue = createUpdateQueue();
      hook.updateQueue = queue;
      const dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, 
      // @ts-expect-error let me do it
      queue);
      queue.dispatch = dispatch;
      return [hook.memoizedState, dispatch];
  }
  function dispatchSetState(fiber, updateQueue, action) {
      const update = createUpdate(action);
      enqueueUpdate(updateQueue, update);
      scheduleUpdateOnFiber(fiber);
  }
  function mountWorkInProgressHook() {
      const hook = {
          memoizedState: null,
          updateQueue: null,
          next: null,
      };
      if (workInProgressHook === null) {
          if (currentlyRenderingFiber === null) {
              throw new Error('Hooks can only be called inside the body of a function component.');
          }
          currentlyRenderingFiber.memoizedState = workInProgressHook = hook;
      }
      else {
          workInProgressHook = workInProgressHook.next = hook;
      }
      return workInProgressHook;
  }

  const beginWork = (wip) => {
      // return child fiber
      switch (wip.tag) {
          case HostRoot:
              return updateHostRoot(wip);
          case HostComponent:
              return updateHostComponent(wip);
          case HostText:
              return null;
          case FunctionComponent:
              return updateFunctionComponent(wip);
          default:
              {
                  console.warn('Unknown fiber tag', wip.tag);
              }
              return null;
      }
  };
  function updateFunctionComponent(wip) {
      const nextChildren = renderWithHooks(wip);
      reconcileChildren(wip, nextChildren);
      return wip.child;
  }
  function updateHostRoot(wip) {
      const baseState = wip.memoizedState;
      const updateQueue = wip.updateQueue;
      const pending = updateQueue.shared.pending;
      updateQueue.shared.pending = null;
      const { memoizedState } = processUpdateQueue(baseState, pending);
      wip.memoizedState = memoizedState;
      const nextChildren = wip.memoizedState;
      reconcileChildren(wip, nextChildren);
      return wip.child;
  }
  function updateHostComponent(wip) {
      const nextProps = wip.pendingProps;
      const nextChildren = nextProps.children;
      reconcileChildren(wip, nextChildren);
      return wip.child;
  }
  function reconcileChildren(wip, children) {
      const current = wip.alternate;
      if (current !== null) {
          // update
          wip.child = reconcileChildFibers(wip, current.child, children);
      }
      else {
          // mount
          wip.child = mountChildFibers(wip, null, children);
      }
  }

  const createInstance = (type, props) => {
      const element = document.createElement(type);
      // TODO: props
      console.log(props);
      return element;
  };
  const appendInitialChild = (parent, child) => {
      parent.appendChild(child);
  };
  const createTextInstance = (text) => {
      return document.createTextNode(text);
  };
  const appendChildToContainer = appendInitialChild;

  let nextEffect = null;
  const commitMutationEffects = (finishedWork) => {
      nextEffect = finishedWork;
      while (nextEffect !== null) {
          const child = nextEffect.child;
          if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags && child) {
              nextEffect = child;
          }
          else {
              commitMutationEffectsOnFiber(nextEffect);
              up: while (nextEffect !== null) {
                  const sibling = nextEffect.sibling;
                  if (sibling !== null) {
                      nextEffect = sibling;
                      break up;
                  }
                  nextEffect = nextEffect.return;
              }
          }
      }
  };
  function commitMutationEffectsOnFiber(finishedWork) {
      const flags = finishedWork.flags;
      if ((flags & Placement) !== NoFlags) {
          console.warn('Placement');
          commitPlacement(finishedWork);
          finishedWork.flags &= ~Placement;
      }
  }
  function commitPlacement(finishedWork) {
      {
          console.log('commit Placement');
      }
      const hostParent = getHostParent(finishedWork);
      if (hostParent) {
          appendPlacementNodeIntoContainer(finishedWork, hostParent);
      }
  }
  function getHostParent(fiber) {
      let parent = fiber.return;
      while (parent) {
          const parentTag = parent.tag;
          if (parentTag === HostComponent) {
              return parent.stateNode;
          }
          if (parentTag === HostRoot) {
              return parent.stateNode.container;
          }
          parent = parent.return;
      }
      {
          console.warn('No host parent');
      }
      return null;
  }
  function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
      if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
          return appendChildToContainer(hostParent, finishedWork.stateNode);
      }
      const child = finishedWork.child;
      if (child) {
          appendPlacementNodeIntoContainer(child, hostParent);
          let sibling = child.sibling;
          while (sibling) {
              appendPlacementNodeIntoContainer(sibling, hostParent);
              sibling = sibling.sibling;
          }
      }
  }

  const completeWork = (wip) => {
      const newProps = wip.pendingProps;
      const current = wip.alternate;
      switch (wip.tag) {
          case HostComponent:
              if (current !== null && wip.stateNode) ;
              else {
                  // create DOM and append to parent
                  const instance = createInstance(wip.type, newProps);
                  appendAllChildren(instance, wip);
                  wip.stateNode = instance;
              }
              bubbleProperties(wip);
              return null;
          case HostText:
              if (current !== null && wip.stateNode) ;
              else {
                  // create DOM and append to parent
                  const instance = createTextInstance(newProps.content);
                  wip.stateNode = instance;
              }
              bubbleProperties(wip);
              return null;
          case HostRoot:
              bubbleProperties(wip);
              break;
          case FunctionComponent:
              bubbleProperties(wip);
              break;
          default:
              {
                  console.warn('Unknown work tag.');
              }
              break;
      }
  };
  function appendAllChildren(parent, wip) {
      let node = wip.child;
      while (node !== null) {
          if (node?.tag === HostComponent || node?.tag === HostText) {
              appendInitialChild(parent, node?.stateNode);
          }
          else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
          }
          if (node === wip) {
              return;
          }
          while (node.sibling === null) {
              if (node.return === null || node.return === wip) {
                  return;
              }
              node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
      }
  }
  function bubbleProperties(wip) {
      let subtreeFlags = NoFlags;
      let child = wip.child;
      while (child !== null) {
          subtreeFlags |= child.subtreeFlags;
          subtreeFlags |= child.flags;
          child.return = wip;
          child = child.sibling;
      }
      wip.subtreeFlags |= subtreeFlags;
  }

  let workInProgress = null;
  function prepareFreshStack(root) {
      workInProgress = createWorkInProgress(root.current, {});
  }
  function scheduleUpdateOnFiber(fiber) {
      const root = markUpdateFromFiberToRoot(fiber);
      root && renderRoot(root);
  }
  function markUpdateFromFiberToRoot(fiber) {
      let node = fiber;
      let parent = node.return;
      while (parent !== null) {
          node = parent;
          parent = node.return;
      }
      if (node.tag === HostRoot) {
          return node.stateNode;
      }
      return null;
  }
  function renderRoot(root) {
      prepareFreshStack(root);
      do {
          try {
              workLoop();
              break;
          }
          catch (err) {
              {
                  console.warn('workLoop error', err);
              }
              workInProgress = null;
          }
      } while (true);
      const finishedWork = root.current.alternate;
      root.finishedWork = finishedWork;
      commitRoot(root);
  }
  function commitRoot(root) {
      const finishedWork = root.finishedWork;
      if (finishedWork === null) {
          return;
      }
      {
          console.log('commit phase');
      }
      // reset
      root.finishedWork = null;
      // check if there are effects
      const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
      const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
      if (subtreeHasEffect || rootHasEffect) {
          // beforeMutation
          // mutation
          commitMutationEffects(finishedWork);
          root.current = finishedWork;
          // layout
      }
      else {
          root.current = finishedWork;
      }
  }
  function workLoop() {
      while (workInProgress !== null) {
          performUnitOfWork(workInProgress);
      }
  }
  function performUnitOfWork(fiber) {
      const next = beginWork(fiber);
      fiber.memoizedProps = fiber.pendingProps;
      if (next === null) {
          completeUnitOfWork(fiber);
      }
      else {
          workInProgress = next;
      }
  }
  function completeUnitOfWork(fiber) {
      let node = fiber;
      do {
          completeWork(node);
          const sibling = node.sibling;
          if (sibling !== null) {
              workInProgress = sibling;
              return;
          }
          node = node.return;
          workInProgress = node;
      } while (node !== null);
  }

  function createContainer(container) {
      const hostRootFiber = new FiberNode(HostRoot, {}, null);
      const root = new FiberRootNode(container, hostRootFiber);
      hostRootFiber.updateQueue = createUpdateQueue();
      return root;
  }
  function updateContainer(element, root) {
      const hostRootFiber = root.current;
      const update = createUpdate(element);
      enqueueUpdate(hostRootFiber.updateQueue, update);
      scheduleUpdateOnFiber(hostRootFiber);
      return element;
  }

  function createRoot(container) {
      const root = createContainer(container);
      return {
          render(element) {
              return updateContainer(element, root);
          },
      };
  }

  var ReactDOM = /*#__PURE__*/Object.freeze({
    __proto__: null,
    createRoot: createRoot
  });

  return ReactDOM;

}));
