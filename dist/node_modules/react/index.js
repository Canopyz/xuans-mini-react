(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["@xuans-mini-react/react"] = {}));
})(this, (function (exports) { 'use strict';

  const currentDispatcher = {
      current: null,
  };
  const resolveDispatcher = () => {
      const dispatcher = currentDispatcher.current;
      if (dispatcher === null) {
          throw new Error('Hooks can only be called inside the body of a function component.');
      }
      return dispatcher;
  };

  const supportSymbol = typeof Symbol === 'function' && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for('react.element')
      : 0xeac7;

  const ReactElement = function (type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
      };
      return element;
  };
  function isValidElement(object) {
      return (typeof object === 'object' &&
          object !== null &&
          object.$$typeof === REACT_ELEMENT_TYPE);
  }
  const jsx = function (type, config, ...maybeChildren) {
      let key = null;
      let ref = null;
      const props = {};
      console.log({ type, config, maybeChildren });
      for (const prop in config) {
          if (prop === 'key') {
              if (config.key === undefined) {
                  key = null;
              }
              else {
                  key = '' + config.key;
              }
              delete config.key;
          }
          else if (prop === 'ref') {
              ref = config.ref ?? null;
              delete config.ref;
          }
          else if (Object.hasOwn(config, prop)) {
              props[prop] = config[prop];
          }
      }
      const maybeChildrenLength = maybeChildren.length;
      if (maybeChildrenLength === 1) {
          props.children = maybeChildren[0];
      }
      else if (maybeChildrenLength > 1) {
          props.children = maybeChildren;
      }
      return ReactElement(type, key, ref, props);
  };

  const useState = (initialState) => {
      const dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
  };
  const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
      currentDispatcher,
  };
  const version = '0.0.0';
  const createElement = jsx;

  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  exports.createElement = createElement;
  exports.isValidElement = isValidElement;
  exports.useState = useState;
  exports.version = version;

}));
