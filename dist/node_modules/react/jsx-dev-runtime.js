'use strict';

const supportSymbol = typeof Symbol === 'function' && Symbol.for;
const REACT_ELEMENT_TYPE = supportSymbol
    ? Symbol.for('react.element')
    : 0xeac7;

const ReactElement = function (type, key, ref, props) {
    const element = {
        $$typeof: REACT_ELEMENT_TYPE,
        type,
        key,
        ref,
        props,
    };
    return element;
};
function isValidElement(object) {
    return (typeof object === 'object' &&
        object !== null &&
        object.$$typeof === REACT_ELEMENT_TYPE);
}
const jsx = function (type, config, ...maybeChildren) {
    let key = null;
    let ref = null;
    const props = {};
    console.log({ type, config, maybeChildren });
    for (const prop in config) {
        if (prop === 'key') {
            if (config.key === undefined) {
                key = null;
            }
            else {
                key = '' + config.key;
            }
            delete config.key;
        }
        else if (prop === 'ref') {
            ref = config.ref ?? null;
            delete config.ref;
        }
        else if (Object.hasOwn(config, prop)) {
            props[prop] = config[prop];
        }
    }
    const maybeChildrenLength = maybeChildren.length;
    if (maybeChildrenLength === 1) {
        props.children = maybeChildren[0];
    }
    else if (maybeChildrenLength > 1) {
        props.children = maybeChildren;
    }
    return ReactElement(type, key, ref, props);
};
const jsxDEV = (type, config) => {
    let key = null;
    const props = {};
    let ref = null;
    for (const prop in config) {
        const val = config[prop];
        if (prop === 'key') {
            if (val !== undefined) {
                key = '' + val;
            }
            continue;
        }
        if (prop === 'ref') {
            if (val !== undefined) {
                ref = val;
            }
            continue;
        }
        if ({}.hasOwnProperty.call(config, prop)) {
            props[prop] = val;
        }
    }
    return ReactElement(type, key, ref, props);
};

exports.isValidElement = isValidElement;
exports.jsx = jsx;
exports.jsxDEV = jsxDEV;
