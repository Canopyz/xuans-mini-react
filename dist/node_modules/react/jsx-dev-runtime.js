'use strict';

const supportSymbol = typeof Symbol === 'function' && Symbol.for;
const REACT_ELEMENT_TYPE = supportSymbol
    ? Symbol.for('react.element')
    : 0xeac7;

const ReactElement = function (type, key, ref, props) {
    const element = {
        $$typeof: REACT_ELEMENT_TYPE,
        type,
        key,
        ref,
        props,
    };
    return element;
};
const jsx = function (type, config, ...maybeChildren) {
    let key = null;
    let ref = null;
    const props = {};
    for (const prop in config) {
        if (prop === 'key') {
            key = config.key;
            delete config.key;
        }
        else if (prop === 'ref') {
            ref = config.ref;
            delete config.ref;
        }
        else if (Object.hasOwn(config, prop)) {
            props[prop] = config[prop];
        }
    }
    const maybeChildrenLength = maybeChildren.length;
    if (maybeChildrenLength === 1) {
        props.children = maybeChildren[0];
    }
    else if (maybeChildrenLength > 1) {
        props.children = maybeChildren;
    }
    return ReactElement(type, key, ref, props);
};
const jsxDEV = jsx;

exports.jsx = jsx;
exports.jsxDEV = jsxDEV;
